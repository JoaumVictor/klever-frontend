import { NextPage } from "next";
import React, { useContext } from "react";
import Header from "../../components/Header";
import Head from "next/head";
import { useFormik } from "formik";
import * as yup from "yup";
import S from "./style.module.scss";
import { useRouter } from "next/router";
import { v4 as uuidv4 } from "uuid";

import BarOptions from "../../components/BarOptions";
import Link from "next/link";
import { SessionContext } from "../../provider/SessionContext";

const AddToken: NextPage = () => {
  const { updateData, loading, allNames } = useContext(SessionContext);

  const router = useRouter();

  const form = useFormik({
    initialValues: {
      Token: "",
      Balance: "",
    },
    validationSchema: yup.object({
      Token: yup
        .string()
        .test("is-unique", "Esse token já existe", (value) => {
          return !allNames.some(
            (each) => each.toLowerCase() === value?.toLowerCase()
          );
        })
        .min(3, "Mínimo de 3 caracteres")
        .max(5, "Máximo de 5 caracteres")
        .required("O nome do Token é obrigatório"),
      Balance: yup
        .number()
        .typeError("Digite apenas valores numéricos")
        .required("O campo de Balanço é obrigatório"),
    }),
    onSubmit: (values) => {
      const token = {
        name: values.Token,
        balance: Number(values.Balance),
        id: uuidv4(),
      };
      updateData(token);
      router.push("/");
    },
  });

  return (
    <div className={S.container}>
      <Head>
        <title>Klever</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/kleverIcon.ico" />
      </Head>
      <Header />
      <BarOptions config={{ buttonEnable: false }} />
      <div className={S.boxWithTitleAndButtonBack}>
        <h2>Add Token</h2>
        <Link href={"/"}>
          <button>Voltar</button>
        </Link>
      </div>
      <form className={S.formAddToken} onSubmit={form.handleSubmit}>
        <label htmlFor="Token">
          <p>Token</p>
          <input
            className={S.inputs}
            id="Token"
            name="Token"
            onChange={form.handleChange}
            value={form.values.Token}
          />
          {form.errors.Token && <p className={S.error}>{form.errors.Token}</p>}
        </label>
        <label htmlFor="email">
          <p>Balance</p>
          <input
            className={S.inputs}
            id="Balance"
            name="Balance"
            onChange={form.handleChange}
            value={form.values.Balance}
          />
          {form.errors.Balance && (
            <p className={S.error}>{form.errors.Balance}</p>
          )}
        </label>
        <div className={S.boxSubmit}>
          {loading ? (
            <button className={S.submitButton} disabled>
              Carregando...
            </button>
          ) : (
            <button className={S.submitButton} type="submit">
              Adicionar
            </button>
          )}
        </div>
      </form>
    </div>
  );
};

export default AddToken;
